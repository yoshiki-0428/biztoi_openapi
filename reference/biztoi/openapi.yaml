openapi: 3.0.0
info:
  title: BizToi
  version: '1.0'
  contact:
    name: BizToi
  description: BizToi API
servers:
  - url: 'http://localhost:8000'
paths:
  /api/books:
    get:
      summary: Book List
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples: {}
      description: すべての本を取得
      parameters: []
      operationId: Books
    parameters: []
    post:
      summary: ''
      responses:
        '200':
          description: OK
      description: 本の情報を作成する、本、問題、質問が作成されていない場合作成を行う
      operationId: BooksPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      tags:
        - biztoi
  /api/books/favorite:
    get:
      summary: Book Favorite List
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples: {}
      description: 本のお気に入り数を集計、多い順に本の情報を返却する
      parameters: []
      operationId: BookFavoriteList
  /api/books/favorite/me:
    get:
      summary: User Book Favorite List
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples: {}
      description: ユーザのお気に入り本のリストを返す
      parameters: []
      operationId: BookFavoriteListMe
  /api/books/likes:
    get:
      summary: Book Likes List
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples: {}
      description: 本に紐づく回答数を集計、多い順に本の情報を返却する
      parameters: []
      operationId: BookLikesList
  /api/books/recommend:
    get:
      summary: Book Reccomend List
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples: {}
      description: 回答している本がある場合、ジャンルを取得してそのジャンルのランキングをRakuten APIで返却する
      parameters: []
      operationId: BookRecommendList
  /api/books/unfinished:
    get:
      summary: Book Unfinished List
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples: {}
      description: 回答途中の本のリスト取得
      parameters: []
      operationId: BookUnfinishedList
  '/api/books/{book_id}':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
    get:
      summary: GetToi
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
      description: 本情報を取得する
      operationId: GetBookId
  '/api/books/{book_id}/toi':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
    get:
      summary: GetToi
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toi'
      description: 本に紐づく問を取得する
      operationId: GetBookToi
    post:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toi'
      operationId: PostToi
      description: Toi情報を作成する
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toi'
      tags:
        - biztoi
  '/api/books/{book_id}/questions':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
    get:
      summary: GetBookQuestion
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      description: 本に紐づく質問一覧を取得する
      operationId: GetBookQuestions
    post:
      summary: ''
      responses:
        '200':
          description: OK
      operationId: PostQuestion
      description: 質問情報を作成する
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      tags:
        - biztoi
  '/api/books/{book_id}/questions/{question_id}':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
      - schema:
          type: string
        name: question_id
        in: path
        required: true
    get:
      summary: GetBookQuestion
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
      description: 本に紐づく質問を取得する（Storeに存在しなかった場合）
      operationId: GetBookQuestion
  '/api/books/{book_id}/answers':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
    get:
      summary: GetAnswerHeadList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnswerHead'
      description: 指定した本の回答データリストを取得
      operationId: GetAnswerHeadList
      tags:
        - biztoi
      parameters: []
  '/api/books/{book_id}/answers/{answer_head_id}':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
      - schema:
          type: string
        name: answer_head_id
        in: path
        required: true
    get:
      summary: GetAnswerHead
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerHead'
      description: 指定した回答内容を取得する
      operationId: GetAnswerHead
      tags:
        - biztoi
      parameters: []
  '/api/books/{book_id}/answers/me':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
    get:
      summary: GetAnswerHeadMeList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnswerHead'
      description: ログインユーザの指定した本の回答一覧を取得する
      operationId: GetAnswerHeadMeList
      tags:
        - biztoi
      parameters: []
    post:
      summary: PostAnswerHead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerHead'
      description: 回答ヘッダー作成(自ユーザ)
      operationId: PostAnswerHead
      tags:
        - biztoi
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerHead'
  /api/users/me:
    get:
      summary: User info
      tags:
        - biztoi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BizToiUser'
      description: ユーザ情報
      parameters: []
      operationId: UserInfo
  /api/favorite/books:
    post:
      summary: FavoriteBooks
      tags:
        - biztoi
      responses:
        '200':
          description: OK
      description: 本をお気に入りする
      parameters: []
      operationId: FavoriteBooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendLikeInfo'
    delete:
      summary: DeleteFavoriteBooks
      tags:
        - biztoi
      responses:
        '200':
          description: OK
      description: 本をお気に入り削除する
      parameters: []
      operationId: DeleteFavoriteBooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendLikeInfo'
  /api/likes/answers:
    post:
      summary: LikesAnswers
      tags:
        - biztoi
      responses:
        '200':
          description: OK
      description: 回答をいいねする
      parameters: []
      operationId: LikesAnswers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendLikeInfo'
    delete:
      summary: DeleteLikesAnswers
      tags:
        - biztoi
      responses:
        '200':
          description: OK
      description: 回答をいいね削除する
      parameters: []
      operationId: DeleteLikesAnswers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendLikeInfo'
  '/api/books/{book_id}/answers/me/{answer_head_id}':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
      - schema:
          type: string
        name: answer_head_id
        in: path
        required: true
    get:
      summary: GetAnswerHeadMe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerHead'
      description: ログインユーザの指定した本の回答を取得する
      operationId: GetAnswerHeadMe
      tags:
        - biztoi
      parameters: []
  '/api/books/{book_id}/answers/me/{answer_head_id}/{question_id}':
    parameters:
      - schema:
          type: string
        name: book_id
        in: path
        required: true
      - schema:
          type: string
        name: answer_head_id
        in: path
        required: true
      - schema:
          type: string
        name: question_id
        in: path
        required: true
    get:
      summary: GetAnswerMeByQuestion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
      description: ログインユーザの質問に紐付いた回答データを取得する
      operationId: GetAnswerMeByQuestion
      tags:
        - biztoi
      parameters: []
    post:
      summary: PostAnswerMeByQuestion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
      description: 指定した回答データを登録更新する
      operationId: PostAnswerMeByQuestion
      tags:
        - biztoi
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerList'
    delete:
      summary: DeleteAnswerMeByQuestion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
      description: 指定した回答データを削除する
      operationId: DeleteAnswerMeByQuestion
      tags:
        - biztoi
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerList'
components:
  schemas:
    Answer:
      title: Answer
      type: object
      description: ''
      properties:
        id:
          type: string
        orderId:
          type: integer
          description: 順番を保持する項目
        answerHeadId:
          type: string
        questionId:
          type: string
        answer:
          type: string
        inserted:
          type: string
        modified:
          type: string
      required:
        - answerHeadId
        - questionId
        - orderId
        - answer
        - inserted
    AnswerHead:
      title: AnswerHead
      type: object
      properties:
        id:
          type: string
        bookId:
          type: string
        userId:
          type: string
        publishFlg:
          type: boolean
        inserted:
          type: string
        modified:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        userInfo:
          $ref: '#/components/schemas/BizToiUser'
        likeInfo:
          $ref: '#/components/schemas/AnswerLikes'
      required:
        - id
        - userId
        - publishFlg
        - inserted
        - likeInfo
    Book:
      title: Book
      type: object
      properties:
        isbn:
          type: string
        title:
          type: string
        detail:
          type: string
        pictureUrl:
          type: string
        linkUrl:
          type: string
        authors:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        favorite:
          type: boolean
      required:
        - isbn
        - detail
        - title
        - favorite
    Question:
      title: Question
      type: object
      properties:
        id:
          type: string
        patternId:
          type: integer
        orderId:
          type: integer
          description: 順番を保証した項目
        title:
          type: string
        detail:
          type: string
        example:
          type: string
          description: 例文
        step:
          type: string
        answerType:
          type: string
          description: '0: OBJECTIVE, 1: GIST, 2: ACTION_PLAN'
        required:
          type: boolean
        nextQuestionId:
          type: string
          description: 次の質問を参照する項目
      required:
        - id
        - patternId
        - orderId
        - title
        - step
        - answerType
        - required
    Toi:
      title: Toi
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        publishFlg:
          type: boolean
      required:
        - title
        - detail
        - publishFlg
    BizToiUser:
      title: BizToiUser
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        pictureUrl:
          type: string
        nickname:
          type: string
        country:
          type: string
      required:
        - id
        - email
        - nickname
    Authorize:
      title: Authorize
      type: object
      properties:
        accessToken:
          type: string
      required:
        - accessToken
    AnswerList:
      title: AnswerList
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
      required:
        - answers
    AnswerLikes:
      title: AnswerLikes
      type: object
      properties:
        active:
          type: boolean
        sum:
          type: integer
        id:
          type: string
      required:
        - active
        - sum
        - id
    SendLikeInfo:
      title: SendLikeInfo
      type: object
      properties:
        id:
          type: string
        active:
          type: boolean
  securitySchemes: {}
